// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String       @id
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  teams         Membership[]
  createdAt     DateTime     @default(now())

  teamInvitations TeamInvitation[]
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  role MemberRole

  @@id([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Fetch token by a clerk session id
  name      String
  hash      String   @id

  userId  String
  expires DateTime?

  permissions String
}

enum Plan {
  DISABLED // non-personal teams can not be free and are therefore disabled
  FREE // for new personal teams
  PRO // No flat fee, just pay as you go
  ENTERPRISE
}

model Team {
  id        String   @id
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Membership[]

  plan Plan

  stripeCustomerId String?   @unique
  trialExpires     DateTime?

  invitations TeamInvitation[]

  // When the user deletes a team it is marked as deactivated until all billing is done
  deactivatedAt DateTime?
  channels      Channel[]
  apikeys       ApiKey[]

  @@index([slug])
}

model TeamInvitation {
  id        String   @id
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expires   DateTime

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@unique([teamId, userId])
  @@index([userId])
}

model Channel {
  id          String  @id
  // no spaces or special characters
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  //  Some custom value the user wants to track
  valueName String?

  reports          Report[]

  @@unique([teamId, name])
}

model Report {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastRunAt DateTime?

  cron String
  // The schedule id from QStash
  scheduleId String @unique
  // How much data to look at in hours
  timeframe Int

  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  slackDestinations SlackSubscription[]

  @@index([channelId])
}

// A slack channel where reports are posted
model SlackSubscription {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url       String
  report   Report? @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String?

  @@index([reportId])
}

model ApiKey {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  name           String
  keyHash        String  @unique
  lastCharacters String?

  @@index([teamId])
}
