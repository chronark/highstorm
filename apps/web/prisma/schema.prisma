// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output   = "../lib/kysely"
  fileName = "types.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Plan {
  DISABLED // non-personal tenants can not be free and are therefore disabled
  FREE // for new personal tenants
  PRO // No flat fee, just pay as you go
  ENTERPRISE
}

model Tenant {
  // This is the id from Clerk
  id        String   @id
  slug      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan Plan

  stripeCustomerId String? @unique

  // When the user deletes a tenant it is marked as deactivated until all billing is done
  deactivatedAt DateTime?
  channels      Channel[]
  apikeys       ApiKey[]

  @@index([slug])
}

model Channel {
  id          String  @id
  // no spaces or special characters
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  //  Some custom value the user wants to track
  valueName String?

  reports  Report[]
  webhooks Webhook[]

  @@unique([tenantId, name])
}

enum WebhookType {
  SLACK
  HTTP
}

// A webhook fires immediately when a channel receives a new event
model Webhook {
  id String @id

  name String
  type WebhookType

  url String
  method String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  // Optional headers if you want to authenticate
  header   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([channelId])
}

model Report {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastRunAt DateTime?

  cron       String
  // The schedule id from QStash
  scheduleId String @unique
  // How much data to look at in hours
  timeframe  Int

  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  slackDestinations SlackSubscription[]

  @@index([channelId])
}

// A slack channel where reports are posted
model SlackSubscription {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url      String
  report   Report? @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String?

  @@index([reportId])
}

model ApiKey {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name           String
  keyHash        String  @unique
  lastCharacters String?
  // first 4 characters of the original key
  firstCharacters String?
  policy         String? @db.Text

  @@index([tenantId])
}
